SIMPLE IDEA.

Each request/response message must be able to fit in memory.

Each bytestring starts with one length byte b.

  if b < 248, it is the length of the data that follows.
  if b >= 248, then (b - 247) bytes follow encoding the length in little-endian.

Then the next bytes are the content of the string. The interpretation
is context-dependent.

  - binary data: as is.
  - strings: UTF-8 encoded.
  - lists: parse the content recursively; each value is an element.
  - dictionaries: parse the content recursively; values alternate between keys and values.
  - unsigned integers: little endian (empty string = 0)

Client starts with a handshake:

  protocol: "Push Fight 0 client"
  solver: string
  user: string
  machine: string

Server response:

  protocol: "Push Fight 0 server"

Then a number of requests follow.

Each request has a single string field "method" which indicates the method being
called, in addition to the method call parameters (different per method,
described below). The response contains either a string field "error" containing
an error message, or the return values (also described below).


GetCurrentPhase
---------------

Request:
  (nothing)

Response:
  phase: integer (optional)


DownloadInputFile
-----------------

Request:
  filename: string

Response:
  bytesize: integer
  sha256sum: bytestring (exactly 32 bytes)
  encoding: bytestring ("zlib")
  encoded_data: bytestring


GetChunks
---------

Request
  phase: integer

Response
  chunks: list of integers

In the above, each integer is encoded as a string, then the strings
are encoded as a string, e.g.:

  [] == 0:
  [42] == 4:2:42
  [1,2,3] == 9:1:11:21:3


ReportChunkComplete
-------------------

Request
  phase: integer
  chunk: integer
  bytesize: integer
  sha256sum: bytestring (exactly 32 bytes)

Response:
  upload: integer

If upload=1 then the client should upload the result.


UploadChunk
-----------

Request
  phase: integer
  chunk: integer
  encoding: bytestring ("zlib")
  encoded_data: bytestring

Response
  (nothing)
