Simple RPC encoding that's efficient with bytes and integers.

Inspired by Google protocol buffers. The main difference is that messages
don't have their length encoded which makes it easier to serialize them but
makes skipping fields when deserializing less efficient because all
submessages must be parsed.

All tokens are either unsigned integers or byte strings.


INTEGER ENCODING
Integers are encoded as little-endian varints, with 7 data bits per byte.
Each output byte except the last one has bit 7 set to indicate there are more
bytes to come.


BYTESTRING ENCODING
varint: length in bytes
N bytes: data


STREAM

Each field in a message has a type and an identifier. The identifier is an
integer greater than 0.

Each value encodes a varint, bytestring, or complex message. Each value starts
with a tag.

Tag 0: end message.
Tag 1: not used
Tag 2: not used
Tag 3: not used
Tag 4*i + 0: start message (field i)
Tag 4*i + 1: integer value (field i); followed by a varint
Tag 4*i + 2: bytestring value (field i); followed by a bytestring.
Tag 4*i + 3: not used

Elements of repeated fields are encoded individually (e.g. a repeated int field
with tag 7 and values 1, 2, 3 would be encoded as: 29, 1, 29, 2, 29, 3). If
a field is not repeated and it is referenced multiple times, the last value is
kept.

The following kinds of errors are ignored:

  - Missing a field.
  - Wrong type for a field (e.g. integer value for a string field).
  - Using a tag that doesn't correspond with a known field.

The following kinds of errors signal a parsing error:

  - Incomplete input.
  - Unbalanced start/end message tags.

Signed integers must be encoded to unsigned for efficient varint encoding:

 encode(i) =  2*i      if i >= 0
             -2*i - 1  if i < 0

This maps number 0, 1, 2, 3 to 0, 2, 4, 6, 8, etc., and
-1, -2, -3, to 1, 3, 5, 7, etc. This ensures that the varint encoding is
compact when the magnitude of the integer is small.

 decode(u) = (u / 2)         if u is even
             -((u - 1) / 2)  if u is odd

Note: be careful to avoid integer overflow when implementing these!

EXAMPLE ENCODING

See the protocol below.

4,                     // Begin RequestChunks (field 1)
  4,                   //   Begin client (field 1)
    6, 9, "solver-rN"  //    solver_id (field 1, string)
    10, 4, "maks"      //    user_id (field 2, string)
    14, 4, "styx"      //    machine_id (field 3, string) 
  0,                   //   End client
  9, 3,                //   phase (field 1, int)
0                      // End RequestChunks


PROTOCOL

Top-level message is one of:

  RequestChunks: 1
  PostResult: 2
  UploadChunk: 3


message ClientInfo {
  string solver_id: 1;
  string user_id: 2;
  string machine_id: 3;
}

message GetChunksRequest {
  ClientData client: 1;
  int phase: 2;
}

message GetChunksResponse {
  // 0 or more chunks to solve.
  vector<int64_t> chunks: 1;
}

message ChunkInfo {
  int phase: 1;
  int chunk: 2;
  int byte_size: 3;
  bytes sha256sum: 4;
}

message PostResultRequest {
  ClientData client: 1;
  ChunkInfo chunk: 2;
}

message PostResultResponse {
  vector<int64_t> chunks_to_upload: 1;
}

message UploadChunk {
  ClientData client: 1;
  ChunkInfo chunk: 2;
  bytes deflated_data: 3;
}

